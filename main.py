# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_senderUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import time

from PyQt5 import QtCore, QtWidgets

import vk_api
import config
import os


def my_filter(users):
    for i, item in enumerate(users):
        if '/' in item:
            users[i] = item.split('/')[-1]
    return users


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(572, 524)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.login = QtWidgets.QLineEdit(self.centralwidget)
        self.login.setEnabled(True)
        self.login.setGeometry(QtCore.QRect(140, 30, 301, 41))
        self.login.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedKingdom))
        self.login.setFrame(False)
        self.login.setAlignment(QtCore.Qt.AlignCenter)
        self.login.setObjectName("login")

        self.password = QtWidgets.QLineEdit(self.centralwidget)
        self.password.setEnabled(True)
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setGeometry(QtCore.QRect(140, 90, 301, 41))
        self.password.setFrame(False)
        self.password.setAlignment(QtCore.Qt.AlignCenter)
        self.password.setObjectName("password")

        self.user_ids = QtWidgets.QTextEdit(self.centralwidget)
        self.user_ids.setEnabled(True)
        self.user_ids.setGeometry(QtCore.QRect(140, 150, 301, 81))
        self.user_ids.setStyleSheet("border: none")
        self.user_ids.setObjectName("user_ids")

        self.message = QtWidgets.QTextEdit(self.centralwidget)
        self.message.setEnabled(True)
        self.message.setGeometry(QtCore.QRect(140, 250, 301, 81))
        self.message.setStyleSheet("border: none")
        self.message.setObjectName("message")

        self.send_message = QtWidgets.QPushButton(self.centralwidget)
        self.send_message.setEnabled(True)
        self.send_message.setGeometry(QtCore.QRect(140, 350, 301, 41))
        self.send_message.setStyleSheet("")
        self.send_message.setFlat(False)
        self.send_message.setObjectName("send_message")

        self.logs = QtWidgets.QTextEdit(self.centralwidget)
        self.logs.setEnabled(True)
        self.logs.setGeometry(QtCore.QRect(140, 410, 301, 80))
        self.logs.setStyleSheet("border: none")
        self.logs.setObjectName("logs")

        self.error = QtWidgets.QErrorMessage()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 572, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("VKAutoSend v1.3", "VKAutoSend v1.3"))
        self.user_ids.setHtml(_translate("MainWindow",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:9.6pt; font-weight:400; font-style:normal;\">\n"
                                         "</body></html>"))
        self.message.setHtml(_translate("MainWindow",
                                        "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                        "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                        "p, li { white-space: pre-wrap; }\n"
                                        "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:9.6pt; font-weight:400; font-style:normal;\">\n"
                                        "</body></html>"))
        self.logs.setHtml(_translate("MainWindow",
                                     "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:9.6pt; font-weight:400; font-style:normal;\">\n"
                                     "</body></html>"))
        self.send_message.setText(_translate("MainWindow", "Отправить"))


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.initUI()

    def initUI(self):
        self.login.setPlaceholderText('Логин')
        self.password.setPlaceholderText('Пароль')
        self.user_ids.setPlaceholderText('ID юзеров')
        self.message.setPlaceholderText('Сообщение')

        self.send_message.clicked.connect(self.button_is_clicked)

    def change_text(self, text=''):
        current_text = self.logs.toPlainText()
        current_text += text + '\n'
        self.logs.setText(current_text)

    def validate(self):
        self.error.setWindowTitle("Error")
        if len(self.login.text()) == 0 or self.login.text().count(' ') == len(
                self.login.text()):
            self.login.setStyleSheet('background-color: #ff8c69')
            self.password.setText('')
            self.error.showMessage('Введите логин')
            return False
        elif len(self.password.text()) == 0 or self.password.text().count(' ') == len(
                self.password.text()):
            self.password.setStyleSheet('background-color: #ff8c69')
            self.password.setText('')
            self.error.showMessage('Введите пароль')
            return False
        elif len(self.user_ids.toPlainText()) == 0 or self.user_ids.toPlainText().count(' ') == len(
                self.user_ids.toPlainText()):
            self.user_ids.setStyleSheet('border: none; background-color: #ff8c69')
            self.user_ids.setText('')
            self.error.showMessage('Введите юзеров')
            return False
        elif len(self.message.toPlainText()) == 0 or self.message.toPlainText().count(' ') == len(
                self.message.toPlainText()):
            self.message.setStyleSheet('border: none; background-color: #ff8c69')
            self.message.setText('')
            self.error.showMessage('Введите сообщение')
            return False
        else:
            return True

    def button_is_clicked(self):
        self.login.setStyleSheet('background-color: white')
        self.password.setStyleSheet('background-color: white')
        self.user_ids.setStyleSheet('background-color: white')
        self.message.setStyleSheet('background-color: white')
        if self.validate():
            login = self.login.text()
            password = self.password.text()
            users = self.user_ids.toPlainText().split('\n')
            message = self.message.toPlainText()
            try:
                session = vk_api.VkApi(login=str(login), password=str(password),
                                       app_id=2685278)  # KateMobile app
            except Exception:
                self.error.showMessage('Проверьте логин или пароль')
                self.login.setStyleSheet('background-color: #ff8c69')
                self.password.setStyleSheet('background-color: #ff8c69')
                self.login.setText('')
                self.password.setText('')
            else:
                f = open(os.getcwd() + '\\' + 'logs.txt', 'w')
                session.auth()
                vk = session.get_api()
                users = my_filter(users)
                c = 0
                self.logs.setStyleSheet('background-color: white')
                for user in users:
                    c += 1
                    try:
                        user_meta = vk.users.get(user_ids=[user])[0]
                        vk.messages.send(user_id=user_meta['id'], message=message, random_id=random.randint(0, 500))
                        to_logs = f'{c}) Успешно отправлено пользователю: {user_meta["first_name"]} {user_meta["last_name"][0]}.'
                        if len(to_logs) > 36:
                            for i in range(0, len(to_logs), 36):
                                to_logs = to_logs[:i] + '\n' + to_logs[i:]
                        self.change_text(text=to_logs)
                        f.writelines(to_logs)
                    except Exception:
                        to_logs = f'\n{c}) Юзер {user} не найден. Сообщение не отправлено'
                        self.change_text(text=to_logs)
                        f.writelines(to_logs)
                    time.sleep(1)
                f.close()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())
